import httpInterceptor from '../http-interceptor';
import { API_CONFIG, buildApiUrlWithParam } from '../../config/api.config.js';

// Service React pur pour la gestion des cat√©gories
class CategoryService {

  // R√©cup√©rer toutes les cat√©gories
  async findAll() {
    try {
      const data = await httpInterceptor.get(API_CONFIG.ENDPOINTS.CATEGORIES.ALL);
      // Si la r√©ponse est un tableau, on le retourne tel quel
      if (Array.isArray(data)) {
        return data;
      }
      // Sinon, on essaie d'extraire le tableau de la r√©ponse
      return data?.content || data?.data || [data] || [];
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des cat√©gories:', error);
      throw new Error('Impossible de r√©cup√©rer les cat√©gories');
    }
  }

  // Supprimer une cat√©gorie
  async delete(id) {
    try {
      const deleteUrl = buildApiUrlWithParam(API_CONFIG.ENDPOINTS.CATEGORIES.DELETE, id);
      console.log('üóëÔ∏è Suppression cat√©gorie avec URL:', deleteUrl);
      await httpInterceptor.delete(deleteUrl);
      return { success: true };
    } catch (error) {
      console.error('Erreur lors de la suppression de la cat√©gorie:', error);
      
      // Gestion sp√©cifique des erreurs selon le code de statut
      if (error.response?.status === 404) {
        throw new Error('Cat√©gorie non trouv√©e');
      }
      
      if (error.response?.status === 400) {
        // Erreur 400 g√©n√©ralement due √† une contrainte de base de donn√©es
        // V√©rifier si c'est une erreur de contrainte ou une erreur HTTP g√©n√©rique
        const errorMessage = error.response?.data?.message || error.response?.data?.error || error.message || '';
        
        if (errorMessage.toLowerCase().includes('constraint') || 
            errorMessage.toLowerCase().includes('http error') ||
            errorMessage.toLowerCase().includes('status: 400')) {
          throw new Error('Impossible de supprimer cette cat√©gorie qui est d√©j√† utilis√©e');
        }
        
        // Message par d√©faut pour les erreurs 400
        throw new Error('Impossible de supprimer cette cat√©gorie qui est d√©j√† utilis√©e');
      }
      
      if (error.response?.status === 409) {
        throw new Error('Impossible de supprimer cette cat√©gorie qui est d√©j√† utilis√©e');
      }
      
      // Erreur g√©n√©rique avec plus de d√©tails
      throw new Error(`Erreur lors de la suppression de la cat√©gorie: ${error.message || 'Erreur inconnue'}`);
    }
  }

  // Sauvegarder une cat√©gorie (cr√©ation ou modification)
  async save(category) {
    try {
      const response = await httpInterceptor.post(API_CONFIG.ENDPOINTS.CATEGORIES.CREATE, category);
      return response;
    } catch (error) {
      console.error('Erreur lors de la sauvegarde de la cat√©gorie:', error);
      if (error.response?.status === 400) {
        const errorData = error.response.data;
        if (errorData.errors && Array.isArray(errorData.errors)) {
          throw new Error(errorData.errors.join(', '));
        }
        throw new Error(errorData.message || 'Donn√©es invalides');
      }
      throw new Error('Erreur lors de la sauvegarde de la cat√©gorie');
    }
  }

  // R√©cup√©rer une cat√©gorie par ID
  async findById(id) {
    try {
      const response = await httpInterceptor.get(buildApiUrlWithParam(API_CONFIG.ENDPOINTS.CATEGORIES.BY_ID, id));
      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de la cat√©gorie:', error);
      if (error.response?.status === 404) {
        throw new Error('Cat√©gorie non trouv√©e');
      }
      throw new Error('Erreur lors de la r√©cup√©ration de la cat√©gorie');
    }
  }

  // Rechercher une cat√©gorie par code
  async findByCode(code) {
    try {
      const response = await httpInterceptor.get(buildApiUrlWithParam(API_CONFIG.ENDPOINTS.CATEGORIES.FILTER, code));
      return response;
    } catch (error) {
      console.error('Erreur lors de la recherche par code:', error);
      if (error.response?.status === 404) {
        return null; // Cat√©gorie non trouv√©e
      }
      throw new Error('Erreur lors de la recherche par code');
    }
  }

  // V√©rifier si une cat√©gorie est utilis√©e par des articles
  async isCategoryUsed(categoryId) {
    try {
      // V√©rifier s'il existe des articles qui utilisent cette cat√©gorie
      const articles = await httpInterceptor.get(API_CONFIG.ENDPOINTS.ARTICLES.ALL);
      
      if (Array.isArray(articles)) {
        // Chercher un article qui utilise cette cat√©gorie
        const articleUsingCategory = articles.find(article => 
          article.category && article.category.id === categoryId
        );
        return !!articleUsingCategory;
      }
      
      // Si la r√©ponse n'est pas un tableau, essayer d'extraire les donn√©es
      const articlesData = articles?.content || articles?.data || [];
      if (Array.isArray(articlesData)) {
        const articleUsingCategory = articlesData.find(article => 
          article.category && article.category.id === categoryId
        );
        return !!articleUsingCategory;
      }
      
      return false; // Par d√©faut, on consid√®re que la cat√©gorie n'est pas utilis√©e
    } catch (error) {
      console.error('Erreur lors de la v√©rification de l\'utilisation de la cat√©gorie:', error);
      // En cas d'erreur, on consid√®re la cat√©gorie comme utilis√©e par s√©curit√©
      return true;
    }
  }
}

export { CategoryService };
