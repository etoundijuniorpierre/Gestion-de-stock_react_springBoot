// Intercepteur HTTP pour g√©rer l'authentification
import { API_CONFIG } from '../config/api.config.js';

class HttpInterceptor {
  constructor() {
    // Utiliser la configuration centralis√©e de l'API
    this.baseURL = API_CONFIG.BASE_URL;
    console.log('üöÄ HttpInterceptor initialis√© avec BASE_URL:', this.baseURL);
    console.log('üîß Configuration API charg√©e depuis api.config.js');
    
    // Flag pour √©viter les appels multiples simultan√©s
    this.isHandlingAuthError = false;
    this.isRefreshingToken = false;
  }

  // M√©thode pour ajouter le token d'authentification aux headers
  getAuthHeaders() {
    const token = localStorage.getItem('token');
    const headers = {
      'Content-Type': 'application/json',
    };
    
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
    
    return headers;
  }

  // M√©thode pour faire une requ√™te GET
  async get(url, options = {}) {
    const config = {
      method: 'GET',
      headers: { ...this.getAuthHeaders(), ...options.headers },
      ...options
    };

    return this.makeRequest(url, config);
  }

  // M√©thode pour faire une requ√™te POST
  async post(url, data, options = {}) {
    const config = {
      method: 'POST',
      headers: { ...this.getAuthHeaders(), ...options.headers },
      body: JSON.stringify(data),
      ...options
    };

    return this.makeRequest(url, config);
  }

  // M√©thode pour faire une requ√™te PUT
  async put(url, data, options = {}) {
    const config = {
      method: 'PUT',
      headers: { ...this.getAuthHeaders(), ...options.headers },
      body: JSON.stringify(data),
      ...options
    };

    return this.makeRequest(url, config);
  }

  // M√©thode pour faire une requ√™te DELETE
  async delete(url, options = {}) {
    const config = {
      method: 'DELETE',
      headers: { ...this.getAuthHeaders(), ...options.headers },
      ...options
    };

    return this.makeRequest(url, config);
  }

  // M√©thode principale pour faire la requ√™te
  async makeRequest(url, config) {
    // Construire l'URL compl√®te avec la BASE_URL explicite
    const fullUrl = url.startsWith('http') ? url : `${this.baseURL}${url}`;
    
    // Debug: afficher les d√©tails de la requ√™te
    console.log('üåê Requ√™te HTTP:', {
      method: config.method,
      url: fullUrl,
      baseURL: this.baseURL,
      originalUrl: url,
      headers: config.headers,
      body: config.body
    });
    
    try {
      const response = await fetch(fullUrl, config);
      
      // Debug: afficher la r√©ponse
      console.log('üì° R√©ponse HTTP:', {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries()),
        url: response.url
      });
      
      // G√©rer les erreurs d'authentification
      if (response.status === 401 || response.status === 403) {
        // Pour l'endpoint de login, ne pas rediriger automatiquement
        if (url.includes('/authenticate')) {
          console.log('üîê Endpoint de login - 403 d√©tect√©, pas de redirection automatique');
          throw new Error(`Erreur d'authentification: ${response.status} - V√©rifiez vos identifiants ou la configuration du serveur`);
        }
        
        // V√©rifier si c'est une vraie erreur d'authentification ou une erreur m√©tier
        // Si la r√©ponse contient des d√©tails d'erreur m√©tier, c'est probablement pas une erreur d'auth
        try {
          const errorData = await response.clone().json();
          // Si on a des d√©tails d'erreur m√©tier, c'est probablement pas une erreur d'auth
          if (errorData.message || errorData.errors || errorData.error) {
            console.log('‚ö†Ô∏è Erreur m√©tier d√©tect√©e, pas de redirection vers login:', errorData);
            throw new Error(`Erreur m√©tier: ${errorData.message || errorData.error || 'Erreur de validation'}`);
          }
        } catch (parseError) {
          // Si on ne peut pas parser la r√©ponse, c'est probablement une vraie erreur d'auth
          console.log('üîê Vraie erreur d\'authentification d√©tect√©e, redirection vers login');
        }
        
        // Token expir√© ou invalide pour les autres endpoints
        this.handleAuthError();
        throw new Error(`Erreur d'authentification: ${response.status}`);
      }
      
      // G√©rer les autres erreurs HTTP
      if (!response.ok) {
        // Essayer de r√©cup√©rer les d√©tails de l'erreur
        try {
          const errorData = await response.clone().json();
          if (errorData.message || errorData.errors || errorData.error) {
            throw new Error(`Erreur serveur: ${errorData.message || errorData.error || 'Erreur de validation'}`);
          }
        } catch (parseError) {
          // Si on ne peut pas parser, utiliser le message par d√©faut
        }
        
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      // V√©rifier si la r√©ponse contient du contenu
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        return await response.json();
      } else {
        return await response.text();
      }
      
    } catch (error) {
      // G√©rer sp√©cifiquement les erreurs CORS
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        console.error('‚ùå Erreur CORS d√©tect√©e. V√©rifiez la configuration CORS du serveur backend.');
        throw new Error('Erreur CORS: Impossible de se connecter au serveur. V√©rifiez que le serveur backend est d√©marr√© et que CORS est configur√©.');
      }
      
      // G√©rer les erreurs de r√©seau
      if (error.name === 'TypeError' && error.message.includes('NetworkError')) {
        console.error('‚ùå Erreur r√©seau d√©tect√©e. V√©rifiez la connexion au serveur.');
        throw new Error('Erreur r√©seau: Impossible de se connecter au serveur. V√©rifiez que le serveur backend est d√©marr√©.');
      }
      
      console.error('Erreur lors de la requ√™te HTTP:', error);
      throw error;
    }
  }

  // G√©rer les erreurs d'authentification
  handleAuthError() {
    console.log('üîê Gestion d\'erreur d\'authentification');
    
    // V√©rifier si on est d√©j√† sur la page de login
    if (window.location.pathname === '/login') {
      console.log('üìç D√©j√† sur la page de login, pas de redirection');
      return;
    }
    
    // V√©rifier si on a un token valide
    const token = localStorage.getItem('token');
    if (!token) {
      console.log('‚ùå Pas de token trouv√©, redirection vers login');
      // Supprimer les tokens expir√©s
      localStorage.removeItem('token');
      localStorage.removeItem('refreshToken');
      localStorage.removeItem('user');
      
      // Rediriger vers la page de connexion
      window.location.href = '/login';
    } else {
      console.log('‚ö†Ô∏è Token pr√©sent mais erreur d\'authentification, tentative de rafra√Æchissement');
      // Essayer de rafra√Æchir le token avant de rediriger
      this.refreshToken().then(success => {
        if (!success) {
          console.log('‚ùå √âchec du rafra√Æchissement du token, redirection vers login');
          // Supprimer les tokens expir√©s
          localStorage.removeItem('token');
          localStorage.removeItem('refreshToken');
          localStorage.removeItem('user');
          
          // Rediriger vers la page de connexion
          window.location.href = '/login';
        }
      });
    }
  }

  // M√©thode pour rafra√Æchir le token
  async refreshToken() {
    const refreshToken = localStorage.getItem('refreshToken');
    if (!refreshToken) {
      this.handleAuthError();
      return false;
    }

    try {
      const response = await fetch(`${this.baseURL}/api/gestionDeStock/auth/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ refreshToken })
      });

      if (response.ok) {
        const data = await response.json();
        localStorage.setItem('token', data.token);
        localStorage.setItem('refreshToken', data.refreshToken);
        return true;
      } else {
        this.handleAuthError();
        return false;
      }
    } catch (error) {
      console.error('Erreur lors du rafra√Æchissement du token:', error);
      this.handleAuthError();
      return false;
    }
  }
}

// Cr√©er une instance unique
const httpInterceptor = new HttpInterceptor();

export default httpInterceptor;
